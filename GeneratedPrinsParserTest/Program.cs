
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace GeneratedPrinsParserTest;

using Prins = PrinsFreeformatter.Prins;

using static ProductExtensions;

/*
 * copied from here https://learn.microsoft.com/en-us/dotnet/standard/data/xml/inferring-schemas-from-xml-documents
 * 
XmlReader reader = XmlReader.Create("item1.xml");
XmlReader reader1 = XmlReader.Create("item2.xml");
XmlSchemaSet schemaSet = new XmlSchemaSet();
XmlSchemaInference inference = new XmlSchemaInference();
schemaSet = inference.InferSchema(reader);

// Display the inferred schema.
Console.WriteLine("Original schema:\n");
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/items"))
{
    schema.Write(Console.Out);
}

// Use the additional data in item2.xml to refine the original schema.
schemaSet = inference.InferSchema(reader1, schemaSet);

// Display the refined schema.
Console.WriteLine("\n\nRefined schema:\n");
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/items")) {
    schema.Write(Console.Out);
}
*/

internal class Program
{

    // Approach 1) without schema:
    // Model.cs is generated by https://json2csharp.com/code-converters/xml-to-csharp
    // NOTE: this was generated from testdata.xml (whithout schema) and needed to be fixed to parse
    // the "testdata.xml" without error

    // Approach 2) with "Russian Doll" schema design:
    // Prins.cs is generated by "XmlSchemaClassGenerator.Console -cn -n Prins testdata.xsd"
    // NOTE: this can parse the testdata.xml without errors out of the box
    // testdata.xsd is generated by System.Xml.Schema.XmlSchemaInference as seen below

    // Approach 3) with "Salami Slice" schema design:
    // PrinsFreeformatter.cs is generated by "XmlSchemaClassGenerator.Console.exe -cn -n PrinsFreeformatter testdata_freeformatter.xsd"
    // testdata_freeformat.xsd is generated by https://www.freeformatter.com/xsd-generator.html from testdata.xml
    // by using the "Salami Slice" schema design

    // The latest workflow ("Salami Slice" schema + XmlSchemaClassGenerator) produces most intuitive data-model

    // For more discussion about xsd-schema styles/designs please see https://xfront.com/GlobalVersusLocal.html
    


    static void Main(string[] args)
    {
        /*
        var reader = XmlReader.Create("testdata.xml");
        var schemaWriter = XmlWriter.Create("testdata.xsd");

        var inference = new XmlSchemaInference();
        var schemaSet = inference.InferSchema(reader);

        foreach (XmlSchema schema in schemaSet.Schemas()) {
            schema.Write(schemaWriter);
        }
        */

        XmlSerializer serializer = new XmlSerializer(typeof(Prins));

        var xml = File.ReadAllText("testdata.xml");

        using (StringReader reader = new StringReader(xml))
        {
            var test = (Prins)serializer.Deserialize(reader);
            var p = test.Product;

            Console.WriteLine("Overview:");
            foreach (var e in p.GetOverview()) {
                Console.WriteLine(e);
            }
            /*
            GetCommonInformation(this Product product)

            public static IEnumerable<(string, object)> GetHints(this Product product)

            public static IEnumerable<(string, object)> GetPackagingInformation(this Product product)

            public static IEnumerable<(string, string)> GetIngredients(this Product product)

            public static IEnumerable<(string, object, string)> GetNutrients(this Product product)
            public static IEnumerable<(string, string)> GetAdditives(this Product product)

            public static IEnumerable<(string, string, int)> GetAlergens(this Product product)
            */

        }

    }
}